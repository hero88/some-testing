import { useDispatch, useSelector } from 'react-redux'
import { Link, useHistory } from 'react-router-dom'
import { ChevronLeft } from 'react-feather'
import { Card, CardBody, CardTitle, CardText, Form, FormGroup, Label, Button, FormFeedback } from 'reactstrap'
import { FormattedMessage, injectIntl } from 'react-intl'
import * as yup from 'yup'
import { useForm } from 'react-hook-form'
import { yupResolver } from '@hookform/resolvers/yup'
import axios from 'axios'
import { Slide, toast } from 'react-toastify'
import PropTypes from 'prop-types'
import classnames from 'classnames'
import { useEffect, useState } from 'react'

import { API_RESET_PASSWORD } from '@constants/api'
import InputPasswordToggle from '@components/input-password-toggle'
import { useQuery } from '@hooks/useQuery'
import { PASSWORD_REGEX } from '@constants/regex'
import Spinner from '@components/spinner/Loading-spinner'
import { ROUTER_URL } from '@constants/router'
import { handleLogout } from '@store/actions/auth'
import '@styles/base/pages/page-auth.scss'

const ResetPasswordV1 = ({ intl }) => {
  // ** Store
  const dispatch = useDispatch()
  const { layout: { requestCount } } = useSelector(state => state)

  // ** Custom hook
  const history = useHistory()
  const query = useQuery()
  const accessToken = query.get('accessToken')

  // ** State
  const [isValidToken, setIsValidToken] = useState(false)

  const SignupSchema = yup.object().shape({
    newPassword: yup.string()
      .required(intl.formatMessage({ id: 'Password is required' }))
      .min(8, intl.formatMessage({ id: 'Password is invalid - min' }, { min: 8 }))
      .max(256, intl.formatMessage({ id: 'Password is invalid - max' }, { max: 256 }))
      .matches(
        PASSWORD_REGEX,
        intl.formatMessage({ id: 'Password is not match' })
      ),
    confirmNewPassword: yup.string()
      .required(intl.formatMessage({ id: 'Password is required' }))
      .oneOf([yup.ref(`newPassword`), null], intl.formatMessage({ id: 'Password must match' }))
  })

  const { register, errors, handleSubmit } = useForm({
    resolver: yupResolver(SignupSchema),
    mode: 'onChange'
  })

  const resetPassword = async (data) => {
    await axios.post(API_RESET_PASSWORD, data).then((response) => {
      if (response?.status === 401) {
        history.push(ROUTER_URL.LOGIN)
      }

      if (response.data.status && response.data.message) {
        setIsValidToken(response.data.status)

        if (!data?.verify) {
          toast.success(
            response.data.message,
            { transition: Slide, hideProgressBar: false, autoClose: 3000 }
          )
          dispatch(handleLogout())
          history.push(ROUTER_URL.LOGIN)
        }
      } else {
        throw new Error(response.data.message)
      }
    }).catch(err => {
      toast.error(
        `${
          err.response && err.response.data
          ? err.response.data?.errors && err.response.data?.errors[0]
            ? err.response.data?.errors[0]?.message
            : err.response.data?.message
          : err.message
        }`,
        { transition: Slide, hideProgressBar: false, autoClose: 3000 }
      )
    })
  }

  useEffect(async () => {
    await resetPassword({ accessToken, verify: true })
  }, [])

  const onSubmit = async (formData) => {
    await resetPassword({
      accessToken,
      newPassword: formData.newPassword,
      confirmNewPassword: formData.confirmNewPassword
    })
  }

  return (
    <>
      {
        isValidToken &&
        <div className='auth-wrapper auth-v1 px-2'>
          <div className='auth-inner py-2'>
            <Card className='mb-0'>
              <CardBody>
                <Link className='brand-logo' to='/' onClick={e => e.preventDefault()}>
                  <svg width='100px' height='70px' viewBox='0 0 100 70' version='1.1'>
                    <title>logo</title>
                    <g id='Symbols' stroke='none' strokeWidth='1' fill='none' fillRule='evenodd'>
                      <g id='sidebar' transform='translate(-80.000000, -30.000000)' fillRule='nonzero'>
                        <g id='Group-3' transform='translate(80.000000, 30.000000)'>
                          <path
                            d='M0,51.1538462 L99.6153846,51.1538462 L99.6153846,63.1752019 C99.6153846,63.1752019 52.4218898,78.480375 0.0088993956,63.250948 L0,51.1538462 Z'
                            id='Path' fill='#F4792C'></path>
                          <path
                            d='M0,6.56565335 C0,6.56565335 47.2863181,-8.20706669 99.5220827,6.56565335 L99.6153846,48.4615385 L0,48.4615385 L0,6.56565335 Z'
                            id='Path' fill='#204285'></path>
                          <path
                            d='M25.6310773,13.4615385 C28.9529285,13.4615385 31.4764709,13.9886469 33.1972696,15.0428638 C34.9225034,16.0970806 35.7829027,17.6964267 35.7829027,19.8318917 C35.7829027,21.7150654 35.2506969,23.2288127 34.1862854,24.3731336 C33.1218738,25.5174544 31.5030812,26.4094841 29.3254725,27.0537277 C30.1725667,28.1665122 31.1571474,29.4549995 32.2836497,30.9191896 C33.4101519,32.3878849 34.5810047,33.8836114 35.8006429,35.4108743 C36.1864921,35.9019411 36.7098278,36.5056379 37.3795201,37.2219648 C38.0447773,37.9337864 38.6346387,38.3752961 39.1446693,38.5374833 C39.4329474,38.6275873 39.7966214,38.7041757 40.2356911,38.7672485 L40.4145874,38.7930631 C40.469069,38.7861933 40.5247497,38.7790902 40.5816249,38.7717537 C41.140441,38.6951653 41.5351603,38.6095665 41.7702178,38.5104521 C42.2137226,38.3122233 42.5108709,38.0554268 42.6616625,37.7490732 C42.8124541,37.4427196 42.88785,37.0507672 42.88785,36.5777211 L42.88785,17.7865307 C42.88785,17.3360107 42.8257593,16.9620791 42.6971429,16.6692411 C42.5685265,16.376403 42.2625082,16.1105962 41.7702178,15.8718206 C41.4686345,15.723149 41.0428699,15.5834878 40.497359,15.4573422 C39.951848,15.3311966 39.5393886,15.250103 39.2599805,15.2140614 L39.2599805,13.7498713 L61.2179043,13.7498713 L61.2179043,20.5347029 L59.8873898,20.5347029 C59.5503261,19.525538 58.9693348,18.5028576 58.1399808,17.4666615 C57.3150618,16.4304655 56.4945779,15.8222634 55.678529,15.633045 C55.3281602,15.5474462 54.84474,15.4933838 54.2193982,15.475363 C53.5984914,15.4573422 53.0840258,15.4483318 52.6760014,15.4483318 L49.0791773,15.4483318 L49.0791773,25.7156832 L51.62933,25.7156832 C52.267977,25.7156832 52.8534033,25.6345896 53.376739,25.4724024 C53.9000747,25.3102152 54.3790599,24.9948512 54.8092596,24.5353208 C55.0753625,24.246988 55.3459004,23.7424055 55.6208734,23.0170683 C55.8958464,22.291731 56.0732483,21.661003 56.1530792,21.120379 L57.4791586,21.120379 L57.4791586,32.2347081 L56.1530792,32.2347081 C56.0821184,31.7075996 55.9047165,31.0498404 55.6208734,30.2524199 C55.3370303,29.4595047 55.0664924,28.9098703 54.8092596,28.6080218 C54.4234104,28.1575018 53.9710355,27.846643 53.4476998,27.6799506 C52.9243641,27.508753 52.3167625,27.4276594 51.6337651,27.4276594 L49.0836123,27.4276594 L49.0836123,35.1045206 C49.0836123,35.9064463 49.1368329,36.5416795 49.2477091,37.0102204 C49.3585853,37.4787612 49.5625975,37.8391772 49.8686159,38.0914684 C50.161329,38.3302441 50.5560483,38.4834209 51.0660789,38.5600093 C51.5716744,38.6365977 52.2635419,38.6726393 53.1328114,38.6726393 C53.5408358,38.6726393 54.0286911,38.6681341 54.6008123,38.6546185 C55.1729335,38.6411029 55.6696589,38.6050613 56.0998586,38.5419885 C56.5877139,38.4789157 57.0445239,38.3843065 57.4702885,38.262666 C57.8960531,38.1365204 58.2109416,37.9563124 58.4193888,37.7175368 C58.9782049,37.1048296 59.6079818,36.1677479 60.3042843,34.910797 C61.0005869,33.6538462 61.4618319,32.7122593 61.6835843,32.0860365 L62.9564432,32.0860365 L62.486328,40.3846154 L39.2555455,40.3846154 L39.2552308,40.3755385 L31.0063558,40.375605 C29.2545117,37.6454536 27.7953809,35.4694419 26.6333982,33.852075 C25.4714156,32.2347081 24.0255899,30.3650499 22.2959211,28.2385954 L21.271425,28.2385954 L21.271425,36.4110287 C21.271425,36.866054 21.3556909,37.2535012 21.5242227,37.5688652 C21.6927545,37.8842292 22.012078,38.150036 22.4866282,38.3662857 C22.7216857,38.4654001 23.0942298,38.5735249 23.5953902,38.6771445 C24.1009857,38.7852693 24.5311854,38.8573525 24.8904243,38.8933941 L24.8904243,40.3710998 L10.7692308,40.3710998 L10.7692308,38.8933941 C11.1284697,38.8573525 11.6074549,38.8032901 12.1973163,38.7312069 C12.7871777,38.6636289 13.2085073,38.5780301 13.45687,38.4744105 C13.9314201,38.2716764 14.2463086,38.01488 14.4104054,37.7085264 C14.5700671,37.3976676 14.654333,37.0057152 14.654333,36.5236587 L14.654333,17.5432499 C14.654333,17.0882247 14.5878073,16.7097879 14.4503208,16.4034342 C14.3128343,16.1015858 13.9846407,15.835779 13.461305,15.6060138 C13.0621507,15.4438266 12.5920356,15.3041654 12.0509597,15.1870302 C11.5098838,15.0744002 11.0841192,14.9933066 10.7736658,14.9392442 L10.7736658,13.4615385 L25.6310773,13.4615385 Z M85.748156,13.7408609 L85.748156,20.5347029 L84.4220765,20.5347029 C84.0850129,19.525538 83.5040216,18.5028576 82.6746675,17.4666615 C81.8453135,16.4304655 81.0292646,15.8222634 80.2132158,15.633045 C79.862847,15.5474462 79.3794267,15.4933838 78.7540849,15.475363 C78.1331782,15.4573422 77.6142775,15.4483318 77.2106881,15.4483318 L73.613864,15.4483318 L73.613864,25.7156832 L76.1640168,25.7156832 C76.8026637,25.7156832 77.383655,25.6345896 77.9114258,25.4724024 C78.4391965,25.3102152 78.9137466,24.9948512 79.3439463,24.5353208 C79.6100492,24.246988 79.8805872,23.7424055 80.1555601,23.0170683 C80.4305331,22.291731 80.6079351,21.661003 80.6877659,21.120379 L82.0138454,21.120379 L82.0138454,32.2347081 L80.6877659,32.2347081 C80.6168052,31.7075996 80.4394032,31.0498404 80.1555601,30.2524199 C79.8717171,29.4595047 79.6011791,28.9098703 79.3439463,28.6080218 C78.9580971,28.1575018 78.5057222,27.846643 77.9823865,27.6799506 C77.4590508,27.508753 76.8558843,27.4276594 76.1684518,27.4276594 L73.6182991,27.4276594 L73.6182991,35.1045206 C73.6182991,35.9064463 73.6715197,36.5416795 73.7823959,37.0102204 C73.8932721,37.4787612 74.0972843,37.8391772 74.4033026,38.0914684 C74.6960158,38.3302441 75.0907351,38.4834209 75.6007656,38.5600093 C76.1107962,38.6365977 76.7982286,38.6726393 77.6674981,38.6726393 C78.0755225,38.6726393 78.5633778,38.6681341 79.1354991,38.6546185 C79.7076203,38.6411029 80.2043457,38.6050613 80.6389804,38.5419885 C81.1268357,38.4789157 81.5836457,38.3843065 82.0094103,38.262666 C82.4351749,38.1365204 82.7500634,37.9563124 82.9629457,37.7175368 C83.5217617,37.1048296 84.1515386,36.1677479 84.8478412,34.910797 C85.5441437,33.6538462 86.0053888,32.7122593 86.2271412,32.0860365 L87.5,32.0860365 L87.0210148,40.375605 L63.7857972,40.375605 L63.7857972,38.9114149 C64.1095557,38.8843837 64.5530605,38.8348265 65.1118766,38.7627433 C65.6706927,38.6861549 66.065412,38.6005561 66.3004695,38.5014417 C66.7439743,38.3032129 67.0411226,38.0464164 67.1919142,37.7400628 C67.3427058,37.4337092 67.4181017,37.0417568 67.4181017,36.5687107 L67.4181017,17.7775203 C67.4181017,17.3270003 67.356011,16.9530687 67.2273946,16.6602307 C67.0987782,16.3673926 66.7927599,16.1015858 66.3004695,15.8628102 C65.9988862,15.7141386 65.5731216,15.5744774 65.0276107,15.4483318 C64.4820997,15.3221862 64.0652052,15.2410926 63.7902322,15.205051 L63.7902322,13.7408609 L85.748156,13.7408609 Z M22.748296,15.1960406 L21.27586,15.1960406 L21.27586,26.4590413 L22.6950754,26.4590413 C24.5223153,26.4590413 25.9415307,25.9724797 26.9527217,24.9993564 C27.9594777,24.0262331 28.4606381,22.4854546 28.4606381,20.3725157 C28.4606381,18.579446 27.9639127,17.2684327 26.974897,16.4394759 C25.9858812,15.610519 24.5755359,15.1960406 22.748296,15.1960406 Z'
                            id='Combined-Shape' fill='#FFFFFF'></path>
                          <path
                            d='M73.0221286,57.1890668 C73.8790618,57.1848898 74.6065623,57.4803998 75.2046303,58.07142 L75.2046303,57.3917468 L76.6998001,57.3917468 L76.6998001,62.3394295 C76.6998001,63.4328167 76.3784502,64.3109037 75.7357503,64.969469 C75.0930504,65.6322558 74.2361173,65.9615385 73.169414,65.9615385 C72.3972815,65.9615385 71.7233392,65.7800109 71.1431241,65.4127341 C70.5629089,65.0454573 70.1746111,64.5599765 69.9782305,63.9478485 L71.7724344,63.9478485 C71.8840142,64.1547055 72.0670052,64.3193469 72.3303336,64.4417725 C72.593662,64.5599765 72.8882328,64.6233001 73.2229723,64.6233001 C73.8299666,64.6233001 74.3253811,64.4291077 74.7092158,64.0407231 C75.0439553,63.7029973 75.2269462,63.2723969 75.2715782,62.748922 C74.6378047,63.3694931 73.883525,63.6818895 73.0176654,63.6818895 C72.1428794,63.6818895 71.3930629,63.3652715 70.772679,62.7362573 C70.1522951,62.107243 69.8443347,61.3389169 69.8443347,60.439722 C69.8443347,59.5405271 70.1522951,58.7722009 70.772679,58.1389651 C71.3930629,57.5057293 72.1428794,57.1890668 73.0221286,57.1890668 Z M78.6725317,57.3833037 L80.1364592,61.3600247 L80.1409224,61.3600247 L81.7164298,57.3833037 L83.4615385,57.3833037 L79.7258454,65.5267165 L78.0878533,65.5267165 L79.278,62.9273077 L76.9229598,57.3833037 L78.6725317,57.3833037 Z M36.2498764,57.1891114 C37.1068096,57.1891114 37.8343101,57.4803998 38.4323781,58.0629768 L38.4323781,57.3917468 L39.8561368,57.3917468 L39.8561368,63.479254 L38.4323781,63.479254 L38.4323781,62.8164671 C37.8298469,63.3863794 37.1023464,63.6776679 36.2454132,63.6818895 C35.3617009,63.6818895 34.6074211,63.3652715 33.982574,62.7362573 C33.3577269,62.107243 33.0497666,61.3389169 33.0497666,60.439722 C33.0497666,59.5405271 33.3621901,58.7722009 33.982574,58.1389651 C34.6074211,57.5057293 35.3617009,57.1891114 36.2498764,57.1891114 Z M62.6228875,57.1891114 C63.5556949,57.1891114 64.3501434,57.5057293 65.0062329,58.1389651 C65.6623223,58.7722009 65.9881355,59.5405271 65.9881355,60.439722 C65.9881355,60.6592437 65.9702827,60.8703223 65.9301139,61.081401 L60.9090211,61.081401 C60.9938218,61.34736 61.1411072,61.5837681 61.3464141,61.7990682 C61.6990064,62.1621235 62.1363994,62.3436511 62.6630562,62.3436511 C62.9888693,62.3436511 63.2834401,62.2718843 63.5556949,62.1283509 C63.8279497,61.9848174 64.0243303,61.7948467 64.1537629,61.554217 L65.7872917,61.554217 C65.5775216,62.2001176 65.1892238,62.7151494 64.6134718,63.0993125 C64.0377198,63.4876971 63.372704,63.6818895 62.6228875,63.6818895 C61.6945432,63.6818895 60.9000947,63.3652715 60.2440053,62.7362573 C59.5879158,62.107243 59.2621027,61.3389169 59.2621027,60.439722 C59.2621027,59.5405271 59.5879158,58.7722009 60.2440053,58.1389651 C60.9000947,57.5057293 61.69008,57.1891114 62.6228875,57.1891114 Z M26.8146851,57.1848898 C27.7653453,57.1848898 28.5776466,57.5015077 29.2426624,58.1347435 C29.9076783,58.7679794 30.2424178,59.5363055 30.2424178,60.4355004 C30.2424178,61.3346953 29.9076783,62.1030214 29.2426624,62.7320357 C28.5776466,63.36105 27.7653453,63.6777095 26.8146851,63.6777095 C25.868488,63.6818895 25.06065,63.3652715 24.3911709,62.7320357 C23.7261551,62.1030214 23.3914156,61.3346953 23.3914156,60.4355004 C23.3914156,59.5363055 23.7261551,58.7679794 24.3911709,58.1347435 C25.0561868,57.5015077 25.8640248,57.1848898 26.8146851,57.1848898 Z M20.3698335,55.1923077 C21.0527021,55.1923077 21.6373805,55.4118294 22.1194054,55.8550945 C22.6014303,56.2983596 22.8602955,56.847164 22.8960011,57.5015077 L21.258009,57.5015077 L21.258009,57.5057293 C21.2223035,57.2017761 21.1285764,56.9738112 20.9679014,56.8218346 C20.8072265,56.669858 20.58853,56.5938697 20.3073488,56.5938697 C20.0440204,56.5938697 19.8253239,56.6740795 19.6601857,56.8302777 C19.4905844,56.9864759 19.4102469,57.1891114 19.4102469,57.4339625 C19.4102469,57.6914785 19.4950475,57.8898923 19.6646489,58.0334258 C19.8297871,58.1727377 20.1556002,58.3204927 20.6376251,58.4766909 C21.5213374,58.7637578 22.1506477,59.1014836 22.525556,59.4898682 C22.9004643,59.8782529 23.0834552,60.3932847 23.0834552,61.0349637 C23.0834552,61.7948467 22.82459,62.4196394 22.3023963,62.9051202 C21.7802027,63.390601 21.1107236,63.6354522 20.2939592,63.6354522 C19.5218267,63.6354522 18.8791268,63.4074873 18.3658596,62.9515575 C17.8481291,62.4956277 17.5624847,61.8961644 17.5,61.1616108 L19.1647712,61.1616108 C19.20494,61.5120013 19.3254462,61.7779604 19.5262899,61.9637096 C19.7226704,62.1494587 19.990462,62.2381118 20.3296648,62.2381118 C20.6777939,62.2381118 20.9634382,62.1452372 21.1821347,61.9552664 C21.4008312,61.7652957 21.5124111,61.5204445 21.5124111,61.2207128 C21.5124111,60.8914302 21.4052944,60.6339143 21.1910611,60.4481651 C20.981291,60.2666375 20.5617508,60.0766668 19.9458301,59.8740313 C19.182624,59.6291801 18.6425776,59.3252269 18.3212276,58.9663933 C17.9998777,58.6075596 17.8392027,58.130522 17.8392027,57.5352803 C17.8392027,56.8513856 18.075752,56.2856949 18.5488505,55.850873 C19.021949,55.4118294 19.6289434,55.1923077 20.3698335,55.1923077 Z M32.4204563,55.356949 L32.4204563,63.4750324 L30.8717281,63.4750324 L30.8717281,55.356949 L32.4204563,55.356949 Z M51.8130325,55.356949 L51.8130325,56.7542894 L48.7825241,56.7542894 L48.7825241,58.7553147 L51.6702103,58.7553147 L51.6702103,60.1526551 L48.7825241,60.1526551 L48.7825241,62.077692 L51.8130325,62.077692 L51.8130325,63.4750324 L47.1936271,63.4750324 L47.1936271,55.356949 L51.8130325,55.356949 Z M43.7882104,57.1806682 L43.7882104,58.5737871 C43.3552806,58.6033381 43.0205411,58.7088774 42.7929182,58.8946265 C42.5251266,59.1141483 42.3912308,59.4645388 42.3912308,59.945798 L42.3912308,63.4708108 L40.8425026,63.4708108 L40.8425026,57.3875253 L42.279651,57.3875253 L42.279651,57.8476766 L42.3555253,57.7505805 C42.6411696,57.370639 43.087489,57.1806682 43.6855569,57.1806682 L43.7882104,57.1806682 Z M56.088772,57.1806682 C56.8519781,57.1806682 57.4589725,57.4255194 57.9052918,57.9110002 C58.3516112,58.4007026 58.5747709,59.0550463 58.5747709,59.886696 L58.5747709,63.4708108 L57.0260427,63.4708108 L57.0260427,60.2117571 C57.0260427,59.6545095 56.9144628,59.2323523 56.6957663,58.9410638 C56.4770699,58.6497754 56.1557199,58.5062419 55.7361797,58.5062419 C55.2898604,58.5062419 54.9551208,58.6539969 54.7319612,58.9452854 C54.5088015,59.2365739 54.3972216,59.679839 54.3972216,60.2624159 L54.3972216,63.4665893 L52.8484934,63.4665893 L52.8484934,57.3875253 L54.2990314,57.3875253 L54.2990314,57.9110002 C54.7989091,57.4255194 55.3925138,57.1806682 56.088772,57.1806682 Z M69.7193653,57.1806682 L69.7193653,58.5737871 C69.2864355,58.6033381 68.951696,58.7088774 68.7240731,58.8946265 C68.4562815,59.1141483 68.3223857,59.4645388 68.3223857,59.945798 L68.3223857,63.4708108 L66.7736575,63.4708108 L66.7736575,57.3875253 L68.2108059,57.3875253 L68.2108059,57.8476766 L68.2866802,57.7505805 C68.5723246,57.370639 69.0186439,57.1806682 69.6167119,57.1806682 L69.7193653,57.1806682 Z M36.4998152,58.5062419 C35.9597688,58.5062419 35.5089862,58.6919911 35.1474676,59.0592679 C34.7859489,59.4307662 34.6029579,59.886696 34.6029579,60.4355004 C34.6029579,60.9800832 34.7859489,61.436013 35.1474676,61.8032898 C35.5089862,62.1705666 35.9597688,62.3563158 36.495352,62.3563158 C37.0353985,62.3563158 37.486181,62.1705666 37.8521629,61.8032898 C38.2181448,61.436013 38.4011357,60.9758617 38.4011357,60.4312788 C38.4011357,59.886696 38.2181448,59.4265446 37.8566261,59.0592679 C37.4951074,58.6919911 37.0398617,58.5062419 36.4998152,58.5062419 Z M73.2676042,58.5062419 C72.7364842,58.5062419 72.2901648,58.6919911 71.9286462,59.0592679 C71.5715907,59.4307662 71.3885997,59.886696 71.3885997,60.4355004 C71.3885997,60.9800832 71.5671275,61.436013 71.9286462,61.8032898 C72.2901648,62.1705666 72.732021,62.3563158 73.2586779,62.3563158 C73.7897979,62.3563158 74.2361173,62.1705666 74.5976359,61.8032898 C74.9591546,61.436013 75.1376824,60.9758617 75.1376824,60.4312788 C75.1376824,59.886696 74.9591546,59.4265446 74.5976359,59.0592679 C74.2361173,58.6919911 73.7987243,58.5062419 73.2676042,58.5062419 Z M26.8146851,58.5189066 C26.2880282,58.5189066 25.8417089,58.7046558 25.4846534,59.0719326 C25.1275979,59.4392094 24.944607,59.8951392 24.944607,60.439722 C24.944607,60.9843048 25.1231347,61.436013 25.4846534,61.7990682 C25.8461721,62.1621235 26.2880282,62.3436511 26.8146851,62.3436511 C27.3458051,62.3436511 27.7921245,62.1621235 28.1536432,61.7990682 C28.5106987,61.436013 28.6936896,60.9800832 28.6936896,60.439722 C28.6936896,59.8993607 28.5151618,59.4392094 28.1536432,59.0719326 C27.7921245,58.7046558 27.3502683,58.5189066 26.8146851,58.5189066 Z M62.6228875,58.5189066 C62.1096202,58.5189066 61.6766904,58.7046558 61.3330245,59.0719326 C61.1098648,59.3167838 60.9536531,59.5954075 60.8688524,59.9120255 L64.3724594,59.9120255 C64.2965851,59.591186 64.1448365,59.3083406 63.9127504,59.0719326 C63.5646213,58.7046558 63.1361547,58.5189066 62.6228875,58.5189066 Z'
                            id='Combined-Shape' fill='#FFFFFF'></path>
                          <path
                            d='M90.1923077,14.8076923 C91.680602,14.8076923 92.8846154,16.0117057 92.8846154,17.5 C92.8846154,18.9882943 91.680602,20.1923077 90.1923077,20.1923077 C88.7040134,20.1923077 87.5,18.9882943 87.5,17.5 C87.5,16.0117057 88.7040134,14.8076923 90.1923077,14.8076923 Z M90.1923077,15.2257525 C88.9381271,15.2257525 87.9180602,16.2458194 87.9180602,17.5 C87.9180602,18.7541806 88.9381271,19.7742475 90.1923077,19.7742475 C91.4464883,19.7742475 92.4665552,18.7541806 92.4665552,17.5 C92.4665552,16.2458194 91.4464883,15.2257525 90.1923077,15.2257525 Z M89.9749164,16.1454849 C90.7065217,16.1454849 91.0702341,16.3670569 91.0702341,16.8102007 C91.0702341,17.1613712 90.8528428,17.3871237 90.4222408,17.4832776 C90.5267559,17.5668896 90.6187291,17.6546823 90.6981605,17.7466555 L91.2332776,18.3737458 C91.3712375,18.5367893 91.4715719,18.6162207 91.5426421,18.6162207 L91.5426421,18.7792642 L91.0535117,18.7792642 L90.2215719,17.7801003 C90.0752508,17.6045151 89.9540134,17.5167224 89.8536789,17.5167224 L89.8160535,17.520903 L89.8160535,18.1814381 C89.8160535,18.3277592 89.8327759,18.4280936 89.8662207,18.4824415 C89.9122074,18.5576923 90.0041806,18.5994983 90.1421405,18.6162207 L90.1421405,18.7792642 L89.0468227,18.7792642 L89.0468227,18.6204013 C89.180602,18.6036789 89.2725753,18.5618729 89.3227425,18.4991639 C89.3645485,18.4406355 89.3896321,18.340301 89.3896321,18.1981605 L89.3896321,16.7558528 C89.3896321,16.5844482 89.3729097,16.4757525 89.3436455,16.4255853 C89.3018395,16.3586957 89.2056856,16.3168896 89.0510033,16.3001672 L89.0510033,16.1454849 L89.9749164,16.1454849 Z M90.0125418,16.3043478 C89.937291,16.3043478 89.8871237,16.3085284 89.8662207,16.3210702 C89.8327759,16.3377926 89.8118729,16.3795987 89.8118729,16.4464883 L89.8118729,17.3411371 C89.8620401,17.3494983 89.9289298,17.3536789 90.0167224,17.3536789 C90.1964883,17.3536789 90.3386288,17.3118729 90.4473244,17.2240803 C90.5643813,17.1279264 90.6229097,16.9941472 90.6229097,16.8185619 C90.6229097,16.6555184 90.5602007,16.5259197 90.4347826,16.4297659 C90.3219064,16.3461538 90.1839465,16.3043478 90.0125418,16.3043478 Z'
                            id='Combined-Shape' fill='#FFFFFF'></path>
                        </g>
                      </g>
                    </g>
                  </svg>
                </Link>
                <CardTitle tag='h4' className='mb-1'>
                  <FormattedMessage id={'Reset password'}/> 🔒
                </CardTitle>
                <CardText className='mb-2'>
                  <FormattedMessage id={'Your new password must be different from previously used passwords'}/>
                </CardText>
                <Form className='auth-reset-password-form mt-2' onSubmit={handleSubmit(onSubmit)}>
                  <FormGroup>
                    <InputPasswordToggle
                      label={
                        <Label for='newPassword'>
                          <FormattedMessage id='New password'/>
                          <span className='text-danger'>&nbsp;*</span>
                        </Label>
                      }
                      htmlFor='newPassword'
                      name='newPassword'
                      autoComplete='new-password'
                      innerRef={register({ required: true })}
                      invalid={!!errors.newPassword}
                      className={classnames('input-group-merge', {
                        'is-invalid': errors['newPassword']
                      })}
                    />
                    {errors && errors.newPassword && <FormFeedback>{errors.newPassword.message}</FormFeedback>}
                  </FormGroup>
                  <FormGroup>
                    <InputPasswordToggle
                      label={
                        <Label for='confirmNewPassword'>
                          <FormattedMessage id='Confirm password'/>
                          <span className='text-danger'>&nbsp;*</span>
                        </Label>
                      }
                      htmlFor='confirmNewPassword'
                      name='confirmNewPassword'
                      autoComplete='new-password'
                      innerRef={register({ required: true })}
                      invalid={!!errors.confirmNewPassword}
                      className={classnames('input-group-merge', {
                        'is-invalid': errors['confirmNewPassword']
                      })}
                    />
                    {errors && errors.confirmNewPassword &&
                    <FormFeedback>{errors.confirmNewPassword.message}</FormFeedback>}
                  </FormGroup>
                  <Button.Ripple type='submit' color='primary' block>
                    <FormattedMessage id={'Set new password'}/>
                  </Button.Ripple>
                </Form>
                <p className='text-center mt-2'>
                  <Link to='/login'>
                    <ChevronLeft className='mr-25' size={14}/>
                    <span className='align-middle'><FormattedMessage id={'Back to login'}/></span>
                  </Link>
                </p>
              </CardBody>
            </Card>
          </div>
        </div>
      }
      {requestCount > 0 && <Spinner/>}
    </>
  )
}

ResetPasswordV1.propTypes = {
  intl: PropTypes.object.isRequired
}

export default injectIntl(ResetPasswordV1)
